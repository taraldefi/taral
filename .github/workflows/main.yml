# This is a basic workflow to help you get started with Actions
name: Continuous integration
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request_target:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.12.0
      with:
        access_token: ${{ github.token }}
        
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT }}
      
    
    # - name: Get yarn cache directory path
    #   id: yarn-cache-dir-path
    #   run: echo "::set-output name=dir::$(yarn cache dir)"

    # - name: Cache yarn cache
    #   uses: actions/cache@v2
    #   id: cache-yarn-cache
    #   with:
    #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
    #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-yarn-
    
    # - name: Cache node_modules
    #   id: cache-node-modules
    #   uses: actions/cache@v2
    #   with:
    #     path: node_modules
    #     key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

    - name: Install modules
      run: |
        # make file runnable, might not be necessary
        chmod +x "${GITHUB_WORKSPACE}/install.sh"

        # run script
        "${GITHUB_WORKSPACE}/install.sh"
      # if: |
      #   steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
      #   steps.cache-node-modules.outputs.cache-hit != 'true'

    - name: "Check contracts"
      uses: docker://hirosystems/clarinet:latest
      with:
        entrypoint: "bash"
        args: -c "cd packages/clarity && clarinet check"

    - name: "Run test suite"
      run: yarn test:reports

    # - name: Run unit tests
    #   run: yarn ci-unit-tests
    
    # - name: Format
    #   run: yarn format
    
    # - name: Commit changes
    #   uses: stefanzweifel/git-auto-commit-action@v4.15.0
    #   with:
    #     commit_message: "style(formatting): apply formatting changes"
    #     branch: ${{ github.head_ref }}